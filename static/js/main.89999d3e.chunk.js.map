{"version":3,"sources":["redux/ToDosReducer.js","components/ToDos/ToDoItem.jsx","components/ToDos/ToDoListContainer.js","components/ToDos/ToDoList.jsx","components/AddItem/AddItemContainer.js","components/AddItem/AddItem.jsx","App.js","redux/store.js","index.js"],"names":["ADD_ITEM","DELETE_ITEM","CHECKED_ITEM","UPDATE_FIELD","UPDATE_COUNT","initialState","ToDos","id","checked","message","fieldValue","activeLength","activeLen","massive","count","item","UPDATE_COUNTAC","type","ToDosReducer","state","action","len","length","filter","trim","map","index","itemID","value","ToDoItem","props","classes","push","className","join","onChange","CheckedItenBtn","onClick","DeleteItemBtn","ToDoListContainer","connect","dispatch","Itemid","todoList","AddItemContainer","AddItemBtn","event","preventDefault","UpdateField","target","maxLength","placeholder","App","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89999d3e.chunk.js","sourcesContent":["const ADD_ITEM = 'ADD-ITEM';\r\nconst DELETE_ITEM = 'DELETE-ITEM';\r\nconst CHECKED_ITEM = 'CHECKED-ITEM';\r\nconst UPDATE_FIELD = 'UPDATE-FIELD';\r\nconst UPDATE_COUNT = 'UPDATE-COUNT';\r\n\r\nconst initialState = {\r\n    ToDos: [\r\n        { id:1, checked: false, message:'Сходить в магазин' },\r\n        { id:2, checked: false, message:'Доделать проект' },\r\n        { id:3, checked: false, message:'Написать свой бит' },\r\n        { id:4, checked: false, message:'Написать другу' },\r\n        { id:5, checked: false, message:'Залить проект на GitHub' },\r\n        { id:6, checked: true, message:'Залить проект на GitHub' }\r\n    ],\r\n    fieldValue: '',\r\n    activeLength: 5\r\n};\r\n\r\nlet activeLen = (massive) => {\r\n    let count = 0;\r\n        for (let item in massive){\r\n          if (massive[item].checked === false) count++\r\n        }\r\n        if (count === 0) count='Нет активных заметок'\r\n        return count;\r\n};\r\n\r\nconst ToDosReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case ADD_ITEM: {\r\n            let len = state.ToDos.length;\r\n            return {...state,\r\n                ToDos:(([...state.ToDos,{ id: ++len, checked: false, message: state.fieldValue }])\r\n                    .filter( item => item.message.trim() !== '')\r\n                    .map((item, index) => {\r\n                            item.id = (++index);\r\n                            return item;\r\n                        })),\r\n                fieldValue: '' }\r\n        }\r\n\r\n        case DELETE_ITEM:\r\n            return {...state, \r\n                ToDos: (state.ToDos.filter( item => item.id !== action.itemID)\r\n                        .map((item, index) => { \r\n                            item.id = (++index); \r\n                            return item; \r\n                        }) )\r\n                    }\r\n\r\n        case CHECKED_ITEM:\r\n            return {...state, ToDos: state.ToDos.map( item => {\r\n                if (item.id === action.itemID){\r\n                    item.checked = !item.checked;\r\n                }\r\n                return item;\r\n            })}\r\n        \r\n        case UPDATE_FIELD: return {...state, fieldValue: action.value }\r\n\r\n        case UPDATE_COUNT: {\r\n            let count = activeLen(state.ToDos)\r\n            return{...state, activeLength: count}\r\n        }\r\n\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport const ADD_ITEMAC = () => ({ type: ADD_ITEM });\r\nexport const DELETE_ITEMAC = (id) => ({ type: DELETE_ITEM, itemID: id });\r\nexport const CHECKED_ITEMAC = (id) => ({ type: CHECKED_ITEM, itemID: id });\r\nexport const UPDATE_FIELDAC = (input) => ({ type: UPDATE_FIELD, value: input });\r\nexport const UPDATE_COUNTAC = () => ({ type: UPDATE_COUNT });\r\nexport default ToDosReducer;","import React from 'react';\r\n\r\nexport default function ToDoItem(props){\r\n    let classes = ['ToDoItem'];\r\n    if (props.checked){\r\n        classes.push('done');\r\n    };\r\n    return(\r\n        <div className={ classes.join(' ') }>\r\n            <div>\r\n                <p>{ props.id }</p>\r\n                <input onChange={ () => props.CheckedItenBtn(props.id) } type='checkbox' checked={ props.checked } />\r\n                <span>{ props.message }</span>\r\n            </div>\r\n            <button onClick={ () => props.DeleteItemBtn(props.id) }>Удалить</button>\r\n        </div>\r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport ToDoList from './ToDoList';\r\nimport { DELETE_ITEMAC, CHECKED_ITEMAC, UPDATE_COUNTAC } from '../../redux/ToDosReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        ToDos: state.ToDos\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        DeleteItemBtn : (Itemid) => {\r\n            dispatch(DELETE_ITEMAC(Itemid));\r\n            dispatch(UPDATE_COUNTAC());\r\n        },\r\n        CheckedItenBtn : (Itemid) => {\r\n            dispatch(CHECKED_ITEMAC(Itemid));\r\n            dispatch(UPDATE_COUNTAC());\r\n        }\r\n    }\r\n};\r\n\r\nconst ToDoListContainer = connect (mapStateToProps, mapDispatchToProps) (ToDoList);\r\n\r\nexport default ToDoListContainer;","import React from 'react';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nexport default function TodoList(props) {\r\n    let todoList = props.ToDos.map(item => \r\n        <ToDoItem id={ item.id } checked={ item.checked } message={ item.message } \r\n        CheckedItenBtn={ props.CheckedItenBtn }\r\n        DeleteItemBtn={ props.DeleteItemBtn }\r\n        key={ item.id }/>)\r\n    return(<div className='ToDoList'>\r\n             { (props.ToDos.length) === 0 ? <p>У Вас нет заметок. Вы можете их добавить</p> : null }\r\n             { todoList }\r\n        </div>\r\n    );\r\n};","\r\nimport { ADD_ITEMAC, UPDATE_FIELDAC, UPDATE_COUNTAC } from '../../redux/ToDosReducer';\r\nimport AddItem from './AddItem';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return{\r\n    fieldValue: state.fieldValue,\r\n    activeLength: state.activeLength\r\n  }\r\n}; \r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    AddItemBtn : (event) => {\r\n      event.preventDefault();\r\n      dispatch(ADD_ITEMAC());\r\n      dispatch(UPDATE_COUNTAC());\r\n    },\r\n    UpdateField : (value) => {\r\n      dispatch(UPDATE_FIELDAC(value));\r\n    }\r\n  }\r\n};\r\n\r\nconst AddItemContainer = connect(mapStateToProps, mapDispatchToProps) (AddItem);\r\nexport default AddItemContainer;\r\n","import React from 'react';\r\nimport TodoListContainer from '../ToDos/ToDoListContainer.js';\r\n\r\nexport default function AddItem(props){\r\n    return(\r\n        <div>\r\n          <div className='addItemContainer'>\r\n            <h2>Всего активных заметок: <span>{ props.activeLength }</span></h2>\r\n            <form> \r\n              <div>\r\n                <span>Добавить заметку:</span>\r\n                <input onChange={ event => props.UpdateField(event.target.value) } maxLength={ 50 } placeholder='Введите заметку' value={ props.fieldValue }/>\r\n                <p>*50 символов максимум</p>\r\n              </div>\r\n              <button onClick={ (event) => props.AddItemBtn(event) } type='submit'>Добавить</button>\r\n            </form>\r\n          </div>\r\n          <article>\r\n              <TodoListContainer />\r\n            </article>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport AddItemContainer from './components/AddItem/AddItemContainer.js';\n\nconst App = () => {\n  // JSX App component\n  //-----------------//\n  //\n  return(\n    <div className='App'>\n      <div className='container'>\n        <h1>TODO List Experience Project (React)</h1>\n        <AddItemContainer />\n    </div>\n    </div>\n  )\n}\n\nexport default App;","import { createStore } from 'redux';\r\nimport ToDosReducer from './ToDosReducer';\r\n\r\nconst store = createStore(ToDosReducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render( \n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root') \n);"],"sourceRoot":""}